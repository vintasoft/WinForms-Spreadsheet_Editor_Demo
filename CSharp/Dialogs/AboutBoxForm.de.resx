<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="decriptionRichTextBox.Text" xml:space="preserve">
    <value>Dieses Projekt demonstriert die folgenden SDK-Funktionen:

Erstellen Sie ein neues XLSX-Dokument oder öffnen Sie ein vorhandenes XLSX-Dokument in der Steuerung des Tabellenkalkulationseditors

Arbeiten Sie mit Tabellenkalkulationsdokumenten
- Legen Sie die Kultur des Tabellenkalkulationsdokuments fest
- Weisen Sie Einstellungen (Autor usw.) des Tabellenkalkulationsdokuments zu
- Bearbeiten Sie die Stileigenschaften des Tabellendokuments
- Definierte Namen zum/vom Tabellendokument hinzufügen/löschen

Arbeiten Sie mit Arbeitsblättern oder Tabellenkalkulationsdokumenten
- Holen Sie sich eine Liste mit Arbeitsblättern
- Ein Arbeitsblatt hinzufügen/löschen/umbenennen; ein Arbeitsblatt kopieren/einfügen; Arbeitsblätter neu anordnen

Arbeiten Sie mit dem Arbeitsblatt eines Tabellenkalkulationsdokuments
- Rendern Sie ein Arbeitsblatt
- Ändern Sie die Einstellungen der Arbeitsblattansicht
- Navigieren Sie mit Maus und Tastatur durch Zellen
- Spalten/Zeilen einfügen oder löschen
- Ändern Sie die Größe von Spalten/Zeilen
- Spalten/Zeilen ein-/ausblenden
- Text suchen und ersetzen

Arbeiten Sie mit ausgewählten Zellen des Arbeitsblatts
- Wählen Sie Zellen mit Maus und Tastatur aus
- Ausgewählte Zellen einfügen, kopieren, einfügen und löschen
- Ändern Sie die Stileigenschaften (Schriftart, Füllung, Rahmen, Zahlenformat, Textstil, Ausrichtung, Einzug usw.) ausgewählter Zellen
- Größe der ausgewählten Zellen ändern
- Spaltenbreite oder Zeilenhöhe ausgewählter Zellen automatisch anpassen
- Löschen Sie Stile, Inhalte und Hyperlinks ausgewählter Zellen
- Ausgewählte Zellen zusammenführen und wieder zusammenführen
- Ausgewählte Zellen ein- und ausblenden
- Legen Sie den Hyperlink für ausgewählte Zellen fest

Arbeiten Sie mit der Zelle des Arbeitsblatts
- Formatierten und lokalisierten Text der Zelle anzeigen
- Berechnen Sie die Formel der Zelle
- Bearbeiten Sie den Zelltext direkt im Zellbereich
- Bearbeiten Sie den Zellentext in der Bearbeitungsleiste
- Markieren Sie Referenzen beim Bearbeiten einer Zellformel

Arbeiten mit Zeichnungen (Diagramme, Bilder, Grafiken)
- Zeichnungen auf Arbeitsblatt rendern
- Aktualisieren Sie ein Diagramm, wenn sich die Diagrammdaten geändert haben
- Wählen Sie eine Zeichnung im Arbeitsblatt aus
- Zeichnung zu einem Arbeitsblatt hinzufügen
- Zeichnung aus Arbeitsblatt löschen

Arbeiten Sie mit Kommentaren
- Kommentare zum Arbeitsblatt rendern
- Einen Kommentar hinzufügen, bearbeiten oder löschen


Das Projekt ist in C# und VB.NET für Visual Studio .NET verfügbar.</value>
  </data>
</root>